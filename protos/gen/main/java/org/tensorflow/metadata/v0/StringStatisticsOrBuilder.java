// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_metadata/proto/v0/statistics.proto

package org.tensorflow.metadata.v0;

public interface StringStatisticsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:tensorflow.metadata.v0.StringStatistics)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.tensorflow.metadata.v0.CommonStatistics common_stats = 1;</code>
   * @return Whether the commonStats field is set.
   */
  boolean hasCommonStats();
  /**
   * <code>.tensorflow.metadata.v0.CommonStatistics common_stats = 1;</code>
   * @return The commonStats.
   */
  org.tensorflow.metadata.v0.CommonStatistics getCommonStats();
  /**
   * <code>.tensorflow.metadata.v0.CommonStatistics common_stats = 1;</code>
   */
  org.tensorflow.metadata.v0.CommonStatisticsOrBuilder getCommonStatsOrBuilder();

  /**
   * <pre>
   * The number of unique values
   * </pre>
   *
   * <code>uint64 unique = 2;</code>
   * @return The unique.
   */
  long getUnique();

  /**
   * <pre>
   * A sorted list of the most-frequent values and their frequencies, with
   * the most-frequent being first.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.StringStatistics.FreqAndValue top_values = 3;</code>
   */
  java.util.List<org.tensorflow.metadata.v0.StringStatistics.FreqAndValue> 
      getTopValuesList();
  /**
   * <pre>
   * A sorted list of the most-frequent values and their frequencies, with
   * the most-frequent being first.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.StringStatistics.FreqAndValue top_values = 3;</code>
   */
  org.tensorflow.metadata.v0.StringStatistics.FreqAndValue getTopValues(int index);
  /**
   * <pre>
   * A sorted list of the most-frequent values and their frequencies, with
   * the most-frequent being first.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.StringStatistics.FreqAndValue top_values = 3;</code>
   */
  int getTopValuesCount();
  /**
   * <pre>
   * A sorted list of the most-frequent values and their frequencies, with
   * the most-frequent being first.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.StringStatistics.FreqAndValue top_values = 3;</code>
   */
  java.util.List<? extends org.tensorflow.metadata.v0.StringStatistics.FreqAndValueOrBuilder> 
      getTopValuesOrBuilderList();
  /**
   * <pre>
   * A sorted list of the most-frequent values and their frequencies, with
   * the most-frequent being first.
   * </pre>
   *
   * <code>repeated .tensorflow.metadata.v0.StringStatistics.FreqAndValue top_values = 3;</code>
   */
  org.tensorflow.metadata.v0.StringStatistics.FreqAndValueOrBuilder getTopValuesOrBuilder(
      int index);

  /**
   * <pre>
   * The average length of the values
   * </pre>
   *
   * <code>float avg_length = 4;</code>
   * @return The avgLength.
   */
  float getAvgLength();

  /**
   * <pre>
   * The rank histogram for the values of the feature.
   * The rank is used to measure of how commonly the value is found in the
   * dataset. The most common value would have a rank of 1, with the second-most
   * common value having a rank of 2, and so on.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.RankHistogram rank_histogram = 5;</code>
   * @return Whether the rankHistogram field is set.
   */
  boolean hasRankHistogram();
  /**
   * <pre>
   * The rank histogram for the values of the feature.
   * The rank is used to measure of how commonly the value is found in the
   * dataset. The most common value would have a rank of 1, with the second-most
   * common value having a rank of 2, and so on.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.RankHistogram rank_histogram = 5;</code>
   * @return The rankHistogram.
   */
  org.tensorflow.metadata.v0.RankHistogram getRankHistogram();
  /**
   * <pre>
   * The rank histogram for the values of the feature.
   * The rank is used to measure of how commonly the value is found in the
   * dataset. The most common value would have a rank of 1, with the second-most
   * common value having a rank of 2, and so on.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.RankHistogram rank_histogram = 5;</code>
   */
  org.tensorflow.metadata.v0.RankHistogramOrBuilder getRankHistogramOrBuilder();

  /**
   * <pre>
   * Weighted statistics for the feature, if the values have weights.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.WeightedStringStatistics weighted_string_stats = 6;</code>
   * @return Whether the weightedStringStats field is set.
   */
  boolean hasWeightedStringStats();
  /**
   * <pre>
   * Weighted statistics for the feature, if the values have weights.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.WeightedStringStatistics weighted_string_stats = 6;</code>
   * @return The weightedStringStats.
   */
  org.tensorflow.metadata.v0.WeightedStringStatistics getWeightedStringStats();
  /**
   * <pre>
   * Weighted statistics for the feature, if the values have weights.
   * </pre>
   *
   * <code>.tensorflow.metadata.v0.WeightedStringStatistics weighted_string_stats = 6;</code>
   */
  org.tensorflow.metadata.v0.WeightedStringStatisticsOrBuilder getWeightedStringStatsOrBuilder();

  /**
   * <pre>
   * A vocabulary file, used for vocabularies too large to store in the proto
   * itself.  Note that the file may be relative to some context-dependent
   * directory.  E.g. in TFX the feature statistics will live in a PPP and
   * vocabulary file names will be relative to this PPP.
   * </pre>
   *
   * <code>string vocabulary_file = 7;</code>
   * @return The vocabularyFile.
   */
  java.lang.String getVocabularyFile();
  /**
   * <pre>
   * A vocabulary file, used for vocabularies too large to store in the proto
   * itself.  Note that the file may be relative to some context-dependent
   * directory.  E.g. in TFX the feature statistics will live in a PPP and
   * vocabulary file names will be relative to this PPP.
   * </pre>
   *
   * <code>string vocabulary_file = 7;</code>
   * @return The bytes for vocabularyFile.
   */
  com.google.protobuf.ByteString
      getVocabularyFileBytes();
}
