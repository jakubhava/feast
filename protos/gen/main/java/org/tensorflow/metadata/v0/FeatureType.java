// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_metadata/proto/v0/schema.proto

package org.tensorflow.metadata.v0;

/**
 * <pre>
 * Describes the physical representation of a feature.
 * It may be different than the logical representation, which
 * is represented as a Domain.
 * </pre>
 *
 * Protobuf enum {@code tensorflow.metadata.v0.FeatureType}
 */
public enum FeatureType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>TYPE_UNKNOWN = 0;</code>
   */
  TYPE_UNKNOWN(0),
  /**
   * <code>BYTES = 1;</code>
   */
  BYTES(1),
  /**
   * <code>INT = 2;</code>
   */
  INT(2),
  /**
   * <code>FLOAT = 3;</code>
   */
  FLOAT(3),
  /**
   * <code>STRUCT = 4;</code>
   */
  STRUCT(4),
  ;

  /**
   * <code>TYPE_UNKNOWN = 0;</code>
   */
  public static final int TYPE_UNKNOWN_VALUE = 0;
  /**
   * <code>BYTES = 1;</code>
   */
  public static final int BYTES_VALUE = 1;
  /**
   * <code>INT = 2;</code>
   */
  public static final int INT_VALUE = 2;
  /**
   * <code>FLOAT = 3;</code>
   */
  public static final int FLOAT_VALUE = 3;
  /**
   * <code>STRUCT = 4;</code>
   */
  public static final int STRUCT_VALUE = 4;


  public final int getNumber() {
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static FeatureType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static FeatureType forNumber(int value) {
    switch (value) {
      case 0: return TYPE_UNKNOWN;
      case 1: return BYTES;
      case 2: return INT;
      case 3: return FLOAT;
      case 4: return STRUCT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<FeatureType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      FeatureType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<FeatureType>() {
          public FeatureType findValueByNumber(int number) {
            return FeatureType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.tensorflow.metadata.v0.SchemaOuterClass.getDescriptor().getEnumTypes().get(1);
  }

  private static final FeatureType[] VALUES = values();

  public static FeatureType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private FeatureType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:tensorflow.metadata.v0.FeatureType)
}

