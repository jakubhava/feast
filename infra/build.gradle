apply plugin: 'base'

import com.bmuschko.gradle.docker.tasks.image.*
apply plugin: 'com.bmuschko.docker-remote-api'

ext {
    outputFileCore = file("$buildDir/dist/core/Dockerfile")
    outputFileServing = file("$buildDir/dist/serving/Dockerfile")
}

configurations {
    feastCore
    feastServing
}

dependencies {
    feastCore project(path: ':feast-core', configuration: 'shadow')
    feastServing project(path: ':feast-serving', configuration: 'shadow')
}

task copyCoreJar(type: Copy, dependsOn: configurations.feastCore) {
    from configurations.feastCore.singleFile
    into file("${buildDir}/dist/core")
}

task copyServingJar(type: Copy, dependsOn: configurations.feastServing) {
    from configurations.feastServing.singleFile
    into file("${buildDir}/dist/serving")
}


task createCoreDockerfile(type: Dockerfile) {
    destFile = outputFileCore
    from 'openjdk:11-jre'

    copyFile("feast-core-${version}-all.jar", "/opt/feast/feast-core.jar")
    // Required for staging jar dependencies when submitting Dataflow jobs.
    copyFile("feast-core-${version}-all.jar", "/opt/feast/feast-core")

    runCommand """\\
                wget -q https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/v0.3.1/grpc_health_probe-linux-amd64 -O /usr/bin/grpc-health-probe && \\
                chmod +x /usr/bin/grpc-health-probe
                """

    defaultCommand("java", "-Xms2048m", "-Xmx2048m", "-jar", "/opt/feast/feast-core.jar")
}

task createServingDockerfile(type: Dockerfile) {
    destFile = outputFileServing
    from 'openjdk:11-jre'

    copyFile("feast-serving-${version}-all.jar", "/opt/feast/feast-serving.jar")

    runCommand """\\
                wget -q https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/v0.3.1/grpc_health_probe-linux-amd64 -O /usr/bin/grpc-health-probe && \\
                chmod +x /usr/bin/grpc-health-probe
                """

    defaultCommand("java", "-Xms1024m", "-Xmx1024m", "-jar", "/opt/feast/feast-serving.jar")
}

task buildServingImage(type: DockerBuildImage, dependsOn: [copyServingJar, createServingDockerfile]) {
    inputDir = file("$buildDir/dist/serving")
    images.add("ai.h2o/feast-serving:${version}")
}


task buildCoreImage(type: DockerBuildImage, dependsOn: [copyCoreJar, createCoreDockerfile]) {
    inputDir = file("$buildDir/dist/core")
    images.add("ai.h2o/feast-core:${version}")
}

task buildImages(dependsOn: [buildCoreImage, buildServingImage])